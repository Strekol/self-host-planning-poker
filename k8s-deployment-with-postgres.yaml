# Exemple de déploiement complet avec PostgreSQL inclus
# Ce fichier est destiné aux environnements de test/staging
# Pour la production, utilisez une base de données managée externe

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: default
data:
  POSTGRES_DB: planning_poker
  POSTGRES_USER: planning_poker_user

---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
  namespace: default
type: Opaque
stringData:
  POSTGRES_PASSWORD: postgres_password_change_me

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: default
  labels:
    app: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15
        ports:
        - containerPort: 5432
          name: postgres
        envFrom:
        - configMapRef:
            name: postgres-config
        - secretRef:
            name: postgres-secret
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - planning_poker_user
            - -d
            - planning_poker
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - planning_poker_user
            - -d
            - planning_poker
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: default
  labels:
    app: postgres
spec:
  selector:
    app: postgres
  ports:
  - name: postgres
    port: 5432
    targetPort: 5432
  type: ClusterIP

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: planning-poker-config-with-postgres
  namespace: default
data:
  DATABASE_TYPE: "postgresql"
  DATABASE_HOST: "postgres-service"
  DATABASE_PORT: "5432"
  DATABASE_NAME: "planning_poker"
  DATABASE_USER: "planning_poker_user"
  DATABASE_SSL_MODE: "disable"
  FLASK_DEBUG: "false"

---
apiVersion: v1
kind: Secret
metadata:
  name: planning-poker-secrets-with-postgres
  namespace: default
type: Opaque
stringData:
  DATABASE_PASSWORD: "postgres_password_change_me"
  SECRET_KEY: "your-flask-secret-key-here"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: planning-poker-with-postgres
  namespace: default
  labels:
    app: planning-poker-with-postgres
spec:
  replicas: 2
  selector:
    matchLabels:
      app: planning-poker-with-postgres
  template:
    metadata:
      labels:
        app: planning-poker-with-postgres
    spec:
      initContainers:
      - name: wait-for-postgres
        image: postgres:15
        command:
        - sh
        - -c
        - |
          until pg_isready -h postgres-service -p 5432 -U planning_poker_user; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
          echo "PostgreSQL is ready!"
        env:
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: planning-poker-secrets-with-postgres
              key: DATABASE_PASSWORD
      containers:
      - name: planning-poker
        image: your-registry/planning-poker:latest
        ports:
        - containerPort: 8000
          name: http
        envFrom:
        - configMapRef:
            name: planning-poker-config-with-postgres
        env:
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: planning-poker-secrets-with-postgres
              key: DATABASE_PASSWORD
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: planning-poker-secrets-with-postgres
              key: SECRET_KEY
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - python
            - /app/healthcheck.py
            - full
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - python
            - /app/healthcheck.py
            - app
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3

---
apiVersion: v1
kind: Service
metadata:
  name: planning-poker-with-postgres-service
  namespace: default
  labels:
    app: planning-poker-with-postgres
spec:
  selector:
    app: planning-poker-with-postgres
  ports:
  - name: http
    port: 80
    targetPort: 8000
    protocol: TCP
  type: ClusterIP
